import org.gradle.api.tasks.Exec
import groovy.json.*

buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
  }
}

apply plugin: 'org.hidetake.ssh'

project.ext {
  androidProjectFolder = projects_folder + '/mobile/android'
  apkFolder = androidProjectFolder + '/platforms/android/build/outputs/apk/'

  tabletAndroid = projects_folder + '/Tablet/android'
  apkFolder = tabletAndroid + '/platforms/android/build/outputs/apk/'

}

repositories {
  mavenCentral()
}

configurations {
  antClasspath
}

dependencies {
  antClasspath 'ant:ant-javamail:1.6.5', 'javax.activation:activation:1.1.1', 'javax.mail:mail:1.5.0-b01'
}

ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
configurations.antClasspath.each { File jar ->
  antClassLoader.addURL( jar.toURI().toURL() )
}

def android_folder = new File(androidProjectFolder)
def appid = ''
def appToken = ''
def appStatus = ''

def tablet_android_folder = new File(tabletAndroid)

remotes {
  webServer {
    host = propSSHHostName
    user = propSSHUsername
    password = propSSHPassword
    knownHosts = allowAnyHosts
  }
}

def executeCmd(command) {
  def proc = command.execute()
  proc.waitFor()
  println proc.err.text
  println proc.in.text
}

task uploadAPk() << {
  println 'APk generated'
  def kk='pwd'.execute().text
  println kk
  exec {
    commandLine 'echo','------------------------------------'
   commandLine 'bash', 'uploadAPK.sh' , 'executemobile'
  }
}
uploadAPk.onlyIf {android_folder.exists()}

task getAppId(dependsOn:'uploadAPk')<< {
  def json = new JsonSlurper().parse(file (androidProjectFolder + propApkUpSuccesJson),"UTF-8")
  appid=json.appData.latestBuild.id
  appToken=json.appData.latestBuild.buildFile.url
  println "--------------latestBuild----------- \n" +json.appData.latestBuild.id
  println '----------------installr Url--------- \n'+json.appData.latestBuild.buildFile.url
}
getAppId.onlyIf {android_folder.exists()}

task apkUrlDownload(dependsOn:'getAppId') << {
  println appToken
  String x=appToken
  String[] token=x.tokenize(".")
  String [] v=token[2].tokenize("/")
  println 'final url for APK -----'+'https://www.installrapp.com/apk/'+appid+'/'+v[3]
  appStatus= 'https://www.installrapp.com/apk/'+appid+'/'+v[3]
}
apkUrlDownload.onlyIf {android_folder.exists()}

task sendNotifyEmailForAPK(dependsOn: 'apkUrlDownload') << {
  def mailParams = [
    mailhost: propEmailHost,
    mailport: propEmailPort,
    ssl: true,
    user: propEmailUsername,
    password: propEmailPassword,
    messagemimetype: propEmailContentType,
    subject: propEmailSubject
  ]

  def messageBody = androidEmailBody.replace("*|APP_URL|*", appStatus)
  messageBody = messageBody.replace("*|GEPPETTO_URL|*", propGeppettoUrl)
  ant.mail (mailParams) {
    from(address: propEmailSender)
    to(address: propEmailReceiver)
    message(messageBody)
    fileset(file: propEmailAttachment)
  }
  println 'Email notification has been sent for Android application!'
}
sendNotifyEmailForAPK.onlyIf {android_folder.exists()}

task deployIonicApss(dependsOn: 'sendNotifyEmailForAPK'){
  doLast{
    println 'Ionic Apps deployed!'
  }
}


//Tablet android


task tabletUploadAPk() << {
  println 'APk generated'
  def kk='pwd'.execute().text
  println kk
  exec {
    commandLine 'echo','------------------------------------'
   commandLine 'bash', 'uploadAPK.sh' , 'executetablet'
  }
}
tabletUploadAPk.onlyIf {tablet_android_folder.exists()}

task tabletgetAppId(dependsOn:'tabletUploadAPk')<< {
  def json = new JsonSlurper().parse(file (tabletAndroid + propApkUpSuccesJson),"UTF-8")
  appid=json.appData.latestBuild.id
  appToken=json.appData.latestBuild.buildFile.url
  println "--------------latestBuild----------- \n" +json.appData.latestBuild.id
  println '----------------installr Url--------- \n'+json.appData.latestBuild.buildFile.url
}
tabletgetAppId.onlyIf {tablet_android_folder.exists()}

task tabletApkUrlDownload(dependsOn:'tabletgetAppId') << {
  println appToken
  String x=appToken
  String[] token=x.tokenize(".")
  String [] v=token[2].tokenize("/")
  println 'final url for APK -----'+'https://www.installrapp.com/apk/'+appid+'/'+v[3]
  appStatus= 'https://www.installrapp.com/apk/'+appid+'/'+v[3]
}
tabletApkUrlDownload.onlyIf {tablet_android_folder.exists()}

task sendNotifyEmailForTablet(dependsOn: 'tabletApkUrlDownload') << {
  def mailParams = [
    mailhost: propEmailHost,
    mailport: propEmailPort,
    ssl: true,
    user: propEmailUsername,
    password: propEmailPassword,
    messagemimetype: propEmailContentType,
    subject: propEmailSubject
  ]

  def messageBody = androidEmailBody.replace("*|APP_URL|*", appStatus)
  messageBody = messageBody.replace("*|GEPPETTO_URL|*", propGeppettoUrl)
  ant.mail (mailParams) {
    from(address: propEmailSender)
    to(address: propEmailReceiver)
    message(messageBody)
    fileset(file: propEmailAttachment)
  }
  println 'Email notification has been sent for Android application!'
}
sendNotifyEmailForTablet.onlyIf {tablet_android_folder.exists()}

task deployIonicTabletApss(dependsOn: 'sendNotifyEmailForTablet'){
  doLast{
    println 'Ionic Apps deployed!'
  }
}
